Here is our take on the classic Plant vs Zombies Game:

We broke our game into 8 classes: 
- gamePlay, focusses on the main play of the game
- gameEnum, includes the different states of the game (PLANT_TIME, ZOMBIE_TIME and so on)
- Zombie, has its location of placement
- Peashooter, has its unique location as well as its cost 
- Sunflower, it also contains its specific location in the game and its individual price
- View, the layout and visual display of the game (buttons, windows, panels...)
- Controller, controls the user actions and flow of application execution to return a response to the actions
- App, the main where the game is run

GAMEPLAY Class:
- gamePlay is the model of the MVC for the PvZ game. 
- The variable sunshine is the money that accumulates when collecting suns, this is also the currency used to buy plants.
- We have made a design decision to kill a zombie if the plant is 2 spaces or more away from the zombie as we have no way of showing 
  the slow demise of the zombie as the peashooter shoots its peas. 
- If the zombie is less than 2 spaces away from the plant, the plant will be eaten by the zombie.
- The zombies, peashooters, and sunflowers are stored and implented using array lists because there are multiple of each type and 
  the size of the ArrayList grows automatically as elements are added to it.
- There are methods in gamePlay that notify the player when the zombies have started attacking (zombieTime)
  and methods that allow the users to pot their plants of their choice (plantTurn). These include error checks such as sufficent sunchines to 
  buy a plant or if the place they want to place a plant where there is already something there and so on.
- plantOrZombie method keeps track of how many zombies and plants have died for game play. It also keeps track of all the winning
  and loosing cases as well as the movement of the zombie.
- The game creates pop-ups notifyig the user the game has ended because either the plants or zombies won
- All in all, the gamePlay is where all the methods used for 'playing' the game are included. Plants are killed by the Zombies
  if they are not strategically placed on the grid by the user and vice versa.

View Class:
- Extends JFrame to use and build a board through a GridLayout (it also helps to keeps track of the board dimensions)
- board[nRows][nColumns] -- using the specific cordinate on the board, the user can place a peashooter or a sunflower by using JButtons. 
- This grid also helped us to randomly place zombies on the board.
- It also displays the status of the game as well as the amount of sunshine left to buy plants
- JButtons are used for the board as well as choosing the type of plants

GAMEENUM Class:
- Holds the basic states of the game:
    - plant_time 
    - zombie_time
    - plants_win
    - zombies_win
 - This class allows the game to be continous till there is a winner in the main of gamePlay class.

ZOMBIE, PEASHOOTER & SUNFLOWER Classes:
- Contains their unique costs and their positions(row and column coordinates) using mutators and accessors in their individual classes.
  
Data Structure Design Decisions:
1. ArrayLists for Zombies, Peashooters, and Sunflowers
  - Can be used to compare X and Y values in order to determine how "close" they are to each other. 
  - Utilized the Iterator to iterate over the arraylists to determine if the Peashooters, Zombies or Sunflowers, 
    Zombies were in the same row
2. gameEnum was an Enum used to determine the state of the game. This keeps the game in a "loop" in the main code, only 
  breaking out of the main code loop once the game state has changed (either when plants or zombies win)
3. JFrame is used to create a display for the game and builds on with JButton, JLabel, JMenu...
4. JButtons are used for the grid/board. It makes it easier for the user to use and play as well as us to keep track of the placement of plants and zombies
5. JButtons are also used for chosing they type of plant they user decides to purchace
6. JOptionPanes are used as pop-ups to alert the user of a win or a loss 